<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.ReviewRepository">
    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Review"
        useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO review
            (subject, content, star, reservation_id, user_id)
        VALUES
            (#{subject}, #{content}, #{star}, #{reservation_id}, #{user_id.id})
    </insert>

    <!-- JOIN 문에서 여러 테이블의 데이터 매핑 받기 -->
    <resultMap id="mapUser" type="com.lec.spring.domain.User">
        <result column="u_user_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_password" property="password"/>
        <result column="u_name" property="name"/>
        <result column="u_regdate" property="regdate"/>
    </resultMap>

    <resultMap id="reviewWrite" type="com.lec.spring.domain.Review">
        <result column="r_id" property="id"/>
        <result column="r_reservation_id" property="reservation_id"/>
        <result column="r_subject" property="subject"/>
        <result column="r_content" property="content"/>
        <result column="r_regdate" property="regdate"/>
        <result column="r_star" property="star"/>
        <result column="leisure_id" property="leisure_id"/>
        <result column="leisure_name" property="leisure_name"/>
        <result column="reserve_date" property="reserve_date"/>
        <result column="reserve_name" property="reserve_name"/>
        <collection resultMap="mapUser" property="user_id"/>
    </resultMap>
    
    <select id="findById" resultMap="reviewWrite">
        SELECT
            r.id AS r_id,
            reservation_id AS r_reservation_id,
            r.user_id AS u_user_id,
            r.subject AS r_subject,
            r.content AS r_content,
            r.regdate AS r_regdate,
            star AS r_star,
            l.id AS leisure_id,
            l.name AS leisure_name,
            rs.`date` AS reserve_date,
            rs.name AS reserve_name,
            u.username AS u_username,
            u.password AS u_password,
            u.regdate AS u_regdate
        FROM
            review r INNER JOIN reservation rs ON (r.reservation_id = rs.id)
                     INNER JOIN leisure l ON (rs.leisure_id  = l.id)
                     INNER JOIN `user` u ON (r.user_id = u.id)
        WHERE
            r.id = #{id}
    </select>

    <select id="findAll" resultType="com.lec.spring.domain.Review">
        SELECT
            r.id, reservation_id, r.user_id, subject, r.content, r.regdate, star, l.name AS leisure_name, rs.`date` AS reserve_date, rs.name AS reserve_name,
            l.id AS leisure_id, lf.file AS min_leisure_file
        FROM
            review r INNER JOIN reservation rs ON (r.reservation_id = rs.id)
                     INNER JOIN leisure l ON (rs.leisure_id  = l.id)
                     INNER JOIN (SELECT leisure_id, min(id) AS leisure_file_id FROM leisure_file GROUP BY leisure_id) m_lf ON (l.id = m_lf.leisure_id)
                     INNER JOIN leisure_file lf ON (lf.leisure_id = m_lf.leisure_id AND lf.id = m_lf.leisure_file_id)
        ORDER BY r.id DESC
    </select>

    <select id ="findByRSId" resultType="com.lec.spring.domain.Review">
        SELECT
            l.name AS leisure_name , rs.`date`AS reserve_date, rs.name AS reserve_name
        FROM
            reservation rs INNER JOIN leisure l ON (rs.leisure_id = l.id)
        WHERE
            rs.id = #{reservation_id}
    </select>

    <update id="update" flushCache="true" parameterType="com.lec.spring.domain.Review">
        UPDATE review
        SET subject = #{subject}, content= #{content}, star = #{star}
        WHERE id = #{id}
    </update>

    <delete id="delete" flushCache="true" parameterType="com.lec.spring.domain.Review">
        DELETE FROM review WHERE id = #{id}
    </delete>

</mapper>